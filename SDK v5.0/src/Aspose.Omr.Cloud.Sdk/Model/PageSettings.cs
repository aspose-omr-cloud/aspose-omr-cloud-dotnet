/*
 * Copyright (C) 2023 Aspose Pty Ltd. All Rights Reserved.
 *
 * Licensed under the MIT (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://github.com/aspose-omr-cloud/aspose-omr-cloud-dotnet/blob/master/LICENSE
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* 
 * Aspose OMR Cloud V5 API
 *
 * Aspose OMR Cloud V5 API
 *
 * OpenAPI spec version: v5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Aspose.Omr.Cloud.Sdk.Model
{
    /// <summary>
    /// PageSettings
    /// </summary>
    [DataContract]
        public partial class PageSettings :  IEquatable<PageSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PageSettings" /> class.
        /// </summary>
        /// <param name="fontFamily">fontFamily.</param>
        /// <param name="fontStyle">fontStyle.</param>
        /// <param name="fontSize">fontSize.</param>
        /// <param name="paperSize">paperSize.</param>
        /// <param name="bubbleColor">bubbleColor.</param>
        /// <param name="pageMarginLeft">pageMarginLeft.</param>
        /// <param name="orientation">orientation.</param>
        /// <param name="bubbleSize">bubbleSize.</param>
        /// <param name="outputFormat">outputFormat.</param>
        public PageSettings(string fontFamily = default(string), FontStyle fontStyle = default(FontStyle), int? fontSize = default(int?), PaperSize paperSize = default(PaperSize), Color bubbleColor = default(Color), int? pageMarginLeft = default(int?), Orientation orientation = default(Orientation), BubbleSize bubbleSize = default(BubbleSize), S3DataType outputFormat = default(S3DataType))
        {
            this.FontFamily = fontFamily;
            this.FontStyle = fontStyle;
            this.FontSize = fontSize;
            this.PaperSize = paperSize;
            this.BubbleColor = bubbleColor;
            this.PageMarginLeft = pageMarginLeft;
            this.Orientation = orientation;
            this.BubbleSize = bubbleSize;
            this.OutputFormat = outputFormat;
        }
        
        /// <summary>
        /// Gets or Sets FontFamily
        /// </summary>
        [DataMember(Name="fontFamily", EmitDefaultValue=false)]
        public string FontFamily { get; set; }

        /// <summary>
        /// Gets or Sets FontStyle
        /// </summary>
        [DataMember(Name="fontStyle", EmitDefaultValue=false)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// Gets or Sets FontSize
        /// </summary>
        [DataMember(Name="fontSize", EmitDefaultValue=false)]
        public int? FontSize { get; set; }

        /// <summary>
        /// Gets or Sets PaperSize
        /// </summary>
        [DataMember(Name="paperSize", EmitDefaultValue=false)]
        public PaperSize PaperSize { get; set; }

        /// <summary>
        /// Gets or Sets BubbleColor
        /// </summary>
        [DataMember(Name="bubbleColor", EmitDefaultValue=false)]
        public Color BubbleColor { get; set; }

        /// <summary>
        /// Gets or Sets PageMarginLeft
        /// </summary>
        [DataMember(Name="pageMarginLeft", EmitDefaultValue=false)]
        public int? PageMarginLeft { get; set; }

        /// <summary>
        /// Gets or Sets Orientation
        /// </summary>
        [DataMember(Name="orientation", EmitDefaultValue=false)]
        public Orientation Orientation { get; set; }

        /// <summary>
        /// Gets or Sets BubbleSize
        /// </summary>
        [DataMember(Name="bubbleSize", EmitDefaultValue=false)]
        public BubbleSize BubbleSize { get; set; }

        /// <summary>
        /// Gets or Sets OutputFormat
        /// </summary>
        [DataMember(Name="outputFormat", EmitDefaultValue=false)]
        public S3DataType OutputFormat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PageSettings {\n");
            sb.Append("  FontFamily: ").Append(FontFamily).Append("\n");
            sb.Append("  FontStyle: ").Append(FontStyle).Append("\n");
            sb.Append("  FontSize: ").Append(FontSize).Append("\n");
            sb.Append("  PaperSize: ").Append(PaperSize).Append("\n");
            sb.Append("  BubbleColor: ").Append(BubbleColor).Append("\n");
            sb.Append("  PageMarginLeft: ").Append(PageMarginLeft).Append("\n");
            sb.Append("  Orientation: ").Append(Orientation).Append("\n");
            sb.Append("  BubbleSize: ").Append(BubbleSize).Append("\n");
            sb.Append("  OutputFormat: ").Append(OutputFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PageSettings);
        }

        /// <summary>
        /// Returns true if PageSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of PageSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PageSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FontFamily == input.FontFamily ||
                    (this.FontFamily != null &&
                    this.FontFamily.Equals(input.FontFamily))
                ) && 
                (
                    this.FontStyle == input.FontStyle ||
                    (this.FontStyle != null &&
                    this.FontStyle.Equals(input.FontStyle))
                ) && 
                (
                    this.FontSize == input.FontSize ||
                    (this.FontSize != null &&
                    this.FontSize.Equals(input.FontSize))
                ) && 
                (
                    this.PaperSize == input.PaperSize ||
                    (this.PaperSize != null &&
                    this.PaperSize.Equals(input.PaperSize))
                ) && 
                (
                    this.BubbleColor == input.BubbleColor ||
                    (this.BubbleColor != null &&
                    this.BubbleColor.Equals(input.BubbleColor))
                ) && 
                (
                    this.PageMarginLeft == input.PageMarginLeft ||
                    (this.PageMarginLeft != null &&
                    this.PageMarginLeft.Equals(input.PageMarginLeft))
                ) && 
                (
                    this.Orientation == input.Orientation ||
                    (this.Orientation != null &&
                    this.Orientation.Equals(input.Orientation))
                ) && 
                (
                    this.BubbleSize == input.BubbleSize ||
                    (this.BubbleSize != null &&
                    this.BubbleSize.Equals(input.BubbleSize))
                ) && 
                (
                    this.OutputFormat == input.OutputFormat ||
                    (this.OutputFormat != null &&
                    this.OutputFormat.Equals(input.OutputFormat))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FontFamily != null)
                    hashCode = hashCode * 59 + this.FontFamily.GetHashCode();
                if (this.FontStyle != null)
                    hashCode = hashCode * 59 + this.FontStyle.GetHashCode();
                if (this.FontSize != null)
                    hashCode = hashCode * 59 + this.FontSize.GetHashCode();
                if (this.PaperSize != null)
                    hashCode = hashCode * 59 + this.PaperSize.GetHashCode();
                if (this.BubbleColor != null)
                    hashCode = hashCode * 59 + this.BubbleColor.GetHashCode();
                if (this.PageMarginLeft != null)
                    hashCode = hashCode * 59 + this.PageMarginLeft.GetHashCode();
                if (this.Orientation != null)
                    hashCode = hashCode * 59 + this.Orientation.GetHashCode();
                if (this.BubbleSize != null)
                    hashCode = hashCode * 59 + this.BubbleSize.GetHashCode();
                if (this.OutputFormat != null)
                    hashCode = hashCode * 59 + this.OutputFormat.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
