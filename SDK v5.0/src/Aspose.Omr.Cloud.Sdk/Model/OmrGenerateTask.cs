/*
 * Copyright (C) 2023 Aspose Pty Ltd. All Rights Reserved.
 *
 * Licensed under the MIT (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://github.com/aspose-omr-cloud/aspose-omr-cloud-dotnet/blob/master/LICENSE
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* 
 * Aspose OMR Cloud V5 API
 *
 * Aspose OMR Cloud V5 API
 *
 * OpenAPI spec version: v5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace Aspose.Omr.Cloud.Sdk.Model
{
    /// <summary>
    /// OmrGenerateTask
    /// </summary>
    [DataContract]
        public partial class OmrGenerateTask :  IEquatable<OmrGenerateTask>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OmrGenerateTask" /> class.
        /// </summary>
        /// <param name="markupFile">markupFile (required).</param>
        /// <param name="settings">settings (required).</param>
        /// <param name="images">images (required).</param>
        public OmrGenerateTask(byte[] markupFile = default(byte[]), PageSettings settings = default(PageSettings),
            Dictionary<string, byte[]> images = default(Dictionary<string, byte[]>), S3DataType outputFormat = default(S3DataType))
        {
            // to ensure "markupFile" is required (not null)
            if (markupFile == null)
            {
                throw new InvalidDataException("markupFile is a required property for OmrGenerateTask and cannot be null");
            }
            else
            {
                this.MarkupFile = markupFile;
            }
            // to ensure "settings" is required (not null)
            if (settings == null)
            {
                throw new InvalidDataException("settings is a required property for OmrGenerateTask and cannot be null");
            }
            else
            {
                this.Settings = settings;
            }
            // to ensure "images" is required (not null)
            if (images == null)
            {
                throw new InvalidDataException("images is a required property for OmrGenerateTask and cannot be null");
            }
            else
            {
                this.Images = images;
                this.OutputFormat = outputFormat;
            }
        }
        
        /// <summary>
        /// Gets or Sets MarkupFile
        /// </summary>
        [DataMember(Name="markupFile", EmitDefaultValue=false)]
        public byte[] MarkupFile { get; set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public PageSettings Settings { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [DataMember(Name="images", EmitDefaultValue=false)]
        public Dictionary<string, byte[]> Images { get; set; }

        /// <summary>
        /// Gets or Sets output format
        /// </summary>
        [DataMember(Name = "outputFormat", EmitDefaultValue = false)]
        public S3DataType OutputFormat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OmrGenerateTask {\n");
            sb.Append("  MarkupFile: ").Append(MarkupFile).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OmrGenerateTask);
        }

        /// <summary>
        /// Returns true if OmrGenerateTask instances are equal
        /// </summary>
        /// <param name="input">Instance of OmrGenerateTask to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OmrGenerateTask input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MarkupFile == input.MarkupFile ||
                    (this.MarkupFile != null &&
                    this.MarkupFile.Equals(input.MarkupFile))
                ) && 
                (
                    this.Settings == input.Settings ||
                    (this.Settings != null &&
                    this.Settings.Equals(input.Settings))
                ) && 
                (
                    this.Images == input.Images ||
                    this.Images != null &&
                    input.Images != null &&
                    this.Images.SequenceEqual(input.Images)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarkupFile != null)
                    hashCode = hashCode * 59 + this.MarkupFile.GetHashCode();
                if (this.Settings != null)
                    hashCode = hashCode * 59 + this.Settings.GetHashCode();
                if (this.Images != null)
                    hashCode = hashCode * 59 + this.Images.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
